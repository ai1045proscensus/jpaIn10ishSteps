
what is the difference

between Hibernate and JPA?

JPA defines a specification.

It is an API.

JPA is like an interface.

It defines how you can define  entities, How do you define a primary key, 
How do you map attributes... etc



AND HIBERNATE IS ONE OF THE MOST POPULAR IMPLEMENTATIONS OF JPA.



AND by adding Hibernate jar to our class path (kommt durch mvn dependencies rein

(durch sb-starter-jpa), we are MAKING USE OF HIBERNATE AS THE IMPLEMENTATION OF THE JPA.


... sieht man auch in logausgaben:

22-11-23T10:02:15.197+03:00  WARN 99202 --- [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2022-11-23T10:02:15.520+03:00  INFO 99202 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2022-11-23T10:02:15.529+03:00  INFO 99202 --- [           main] c.a.s.j.JpaIn10IshStepsApplication       : Started JpaIn10IshStepsApplication in 3.951 seconds (process running for 4.619)
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: insert into course (author, name, id) values (?, ?, ?)
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: insert into course (author, name, id) values 


.....


The reason why we avoid using Hibernate annotations

directly in code is because we don't want

to lock into Hibernate.

There are other JPA implementations that are available.

One of the other alternatives is something called Toplink.


fazit:

jpa: api/spec

 defines how to map entities, how to map attributes, how to make use of the entity manager.

IN YOUR CODE, IT IS ALWAYS RECOMMENDED TO MAKE USE OF JPA.

ONCE YOU HAVE JPA USED IN YOUR CODE, YOU CAN USE HIBERNATE

AS THE IMPLEMENTATION OF JPA. (da es mit in den mvn dependencies drin ist...)


